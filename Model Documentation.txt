The solution is mostly based on the one given in the walkthrough.
The only change is the line changing logic (Line 270-317).

In case the current lane is congested, the lanes next to the current
lane is checked to see if any of them are clear from vehicles.
This is done by implementing a counter that is incremented for each
vehicle closer than a certain threshold. Both the front and rear sides
are considered. However, a higher threshold is used for the rear side,
because the vehicle behind us is coming towards us, and we need to have
some larger clearence to avoid collision while changing lanes.
A lower threshold is fine for the car in front because it is moving away.

If a clear lane is found in either side of the current lane, the reference
velocity is set to just under the maximum (50.0 mph) before changing lanes.
If there is no lane that can be changed into, the velocity of the vehicle
immediately in front of the vehicle is set as the target velocity, and the
current lane is maintained.

Being in Lane 1 will give us a higher chance of finding a less congested lane if
we run into a congestion. So even if the current lane is not congested, but
the current lane is not Lane 1, we change to Lane 1 if Lane 1 is not congested.
This atcually improved the performance considerably and gives a lap time of under
5 mins and 20 secs unless the car gets caught in the middle of a particularly slow
traffic jam.

Trajectory Generation
=====================
The trajectory of the car is a list of 50, (X, Y) coordinates which is passed to the simulator.
After each 20 ms interval, the simulator moves the car forward to the next point in the trajectory,
and removing that point from the list. Along with the current telemetry data, the simulator
passes the remaining points of the previous trajectory back to the program.
The path planner uses the previous trajectory and the current position of the car for trajectory generation.

Trajectory generation starts by extracting the last 2 X, Y coordinates of the previous trajectory.
However at the start of the program, the previous trajectory is empty, the current position of the car,
along with a dummy previous position created by extrapolating the current position backwards using the
car velocity and yaw, will serve as the last 2 X, Y coordinates of the previous trajectory.
These two previous points, and 3 more points in the lane that are 30 m, 60 m, and 90 m
ahead of the current position are passed to the spline module to create a smooth spline.
The resulting spline is broken up into individual X, Y coordinates, and these points are added to the
previous path, so that the required 50 (X, Y) coordinates of the trajectory is filled up again.
This new trajectory is passed to the simulator, and this process is repeated when the next telemetry data is received.
